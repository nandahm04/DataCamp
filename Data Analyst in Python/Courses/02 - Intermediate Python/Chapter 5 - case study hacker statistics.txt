# 1. Random float
import numpy as np
np.random.seed(123)
print(np.random.rand())
-------------------------------------------------------------------------------
# 2. Roll the dice
import numpy as np
np.random.seed(123)
print(np.random.randint(1, 7))
print(np.random.randint(1, 7))
-------------------------------------------------------------------------------
# 3. Determine your next move
step = 50
dice = np.random.randint(1, 7)
if dice <= 2:
    step -= 1
elif 2 < dice <= 5:
    step += 1
else:
    step += np.random.randint(1, 7)
print(dice)
print(step)
-------------------------------------------------------------------------------
# 4. The next step
random_walk = [0]
for x in range(100):
    step = random_walk[-1]
    dice = np.random.randint(1, 7)
    if dice <= 2:
        step = max(0, step - 1)
    elif 2 < dice <= 5:
        step += 1
    else:
        step += np.random.randint(1, 7)
    random_walk.append(step)
print(random_walk)
-------------------------------------------------------------------------------
# 5. How low can you go?
random_walk = [0]
for x in range(100):
    step = random_walk[-1]
    dice = np.random.randint(1, 7)
    if dice <= 2:
        step = max(0, step - 1)
    elif 2 < dice <= 5:
        step += 1
    else:
        step += np.random.randint(1, 7)
    random_walk.append(step)
print(random_walk)
-------------------------------------------------------------------------------
# 6. Visualize the walk
random_walk = [0]
for x in range(100):
    step = random_walk[-1]
    dice = np.random.randint(1, 7)
    if dice <= 2:
        step = max(0, step - 1)
    elif 2 < dice <= 5:
        step += 1
    else:
        step += np.random.randint(1, 7)
    random_walk.append(step)
import matplotlib.pyplot as plt
plt.plot(random_walk)
plt.show()
-------------------------------------------------------------------------------
# 7. Simulate multiple walks
all_walks = []
for i in range(10):
    random_walk = [0]
    for x in range(100):
        step = random_walk[-1]
        dice = np.random.randint(1, 7)
        if dice <= 2:
            step = max(0, step - 1)
        elif 2 < dice <= 5:
            step += 1
        else:
            step += np.random.randint(1, 7)
        random_walk.append(step)
    all_walks.append(random_walk)
print(all_walks)
-------------------------------------------------------------------------------
# 8. Visualize all walks
all_walks = []
for i in range(10):
    random_walk = [0]
    for x in range(100):
        step = random_walk[-1]
        dice = np.random.randint(1, 7)
        if dice <= 2:
            step = max(0, step - 1)
        elif 2 < dice <= 5:
            step += 1
        else:
            step += np.random.randint(1, 7)
        random_walk.append(step)
    all_walks.append(random_walk)
np_aw = np.array(all_walks)
plt.plot(np_aw)
plt.show()
plt.clf()
np_aw_t = np.transpose(np_aw)
plt.plot(np_aw_t)
plt.show()
-------------------------------------------------------------------------------
# 9. Implement clumsiness
all_walks = []
for i in range(250):
    random_walk = [0]
    for x in range(100):
        step = random_walk[-1]
        dice = np.random.randint(1, 7)
        if dice <= 2:
            step = max(0, step - 1)
        elif 2 < dice <= 5:
            step += 1
        else:
            step += np.random.randint(1, 7)
        if np.random.rand() <= 0.001:
            step = 0
        random_walk.append(step)
    all_walks.append(random_walk)
np_aw_t = np.transpose(np.array(all_walks))
plt.plot(np_aw_t)
plt.show()
-------------------------------------------------------------------------------
# 10. Plot the distribution
all_walks = []
for i in range(500):
    random_walk = [0]
    for x in range(100):
        step = random_walk[-1]
        dice = np.random.randint(1, 7)
        if dice <= 2:
            step = max(0, step - 1)
        elif 2 < dice <= 5:
            step += 1
        else:
            step += np.random.randint(1, 7)
        if np.random.rand() <= 0.001:
            step = 0
        random_walk.append(step)
    all_walks.append(random_walk)

# Create and plot np_aw_t
np_aw_t = np.transpose(np.array(all_walks))

# Select last row from np_aw_t: ends
ends = np_aw_t[-1,:]

# Plot histogram of ends, display plot
plt.hist(ends)
plt.show()